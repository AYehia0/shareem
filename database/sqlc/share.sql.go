// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: share.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const countShares = `-- name: CountShares :one
SELECT COUNT(*) FROM share
`

func (q *Queries) CountShares(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countShares)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createShare = `-- name: CreateShare :one
INSERT INTO share (
  id, url, title, note, ip, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, url, title, note, ip, created_at, updated_at
`

type CreateShareParams struct {
	ID        uuid.UUID      `json:"id"`
	Url       string         `json:"url"`
	Title     string         `json:"title"`
	Note      sql.NullString `json:"note"`
	Ip        pgtype.Inet    `json:"ip"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) CreateShare(ctx context.Context, arg CreateShareParams) (Share, error) {
	row := q.db.QueryRow(ctx, createShare,
		arg.ID,
		arg.Url,
		arg.Title,
		arg.Note,
		arg.Ip,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Share
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Note,
		&i.Ip,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShares = `-- name: ListShares :many
SELECT id, url, title, note, ip, created_at, updated_at FROM share ORDER BY created_at DESC
`

func (q *Queries) ListShares(ctx context.Context) ([]Share, error) {
	rows, err := q.db.Query(ctx, listShares)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Share{}
	for rows.Next() {
		var i Share
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.Note,
			&i.Ip,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
